//+build ignore

package main

import (
	"bytes"
	"io"
	"log"
	"os"
	"strconv"
)

var (
	start = []byte(`// AUTOGENERATED by genalphabet.go, do not edit.

package base58

const (
	alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
	alphabetIDx0 = '1'
)
	
var base58 = [256]byte{`)

	end = []byte(`}`)

	alphabet = []byte("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
	tab      = []byte("\t")
	invalid  = []byte("255")
	comma    = []byte(",")
	space    = []byte(" ")
	newline  = []byte("\n")
)

func write(w io.Writer, b []byte) {
	_, err := w.Write(b)
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	file, err := os.Create("alphabet.go")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	write(file, start)
	write(file, newline)

	for i := byte(0); i < 32; i++ {
		write(file, tab)
		for j := byte(0); j < 8; j++ {
			index := bytes.IndexByte(alphabet, i*8+j)

			if index == -1 {
				write(file, invalid)
			} else {
				write(file, strconv.AppendInt(nil, int64(index), 10))
			}

			write(file, comma)

			if j != 7 {
				write(file, space)
			}
		}
		write(file, newline)
	}
	write(file, end)
	write(file, newline)
}
